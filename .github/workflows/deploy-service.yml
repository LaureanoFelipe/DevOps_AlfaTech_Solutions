name: Deploy to ECS (Service)

on:
  release:
    types: [published]
  workflow_dispatch: {}  # permite rodar no botão

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      CLUSTER: bright-ostrich-tu36a2            # seu cluster
      SERVICE: alfa-service                      # <-- crie um service com esse nome OU ajuste
      CONTAINER: alfa                            # nome do container na TD
      IMAGE: felipelaureano/devops_alfatech_solutions:${{ github.event.release.tag_name || 'latest' }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # baixa a TD atual e mantém apenas campos válidos p/ registrar nova revisão
      - name: Render new task definition
        id: taskdef
        run: |
          aws ecs describe-task-definition --task-definition alfa-task \
            --query 'taskDefinition | {
              family: family,
              taskRoleArn: taskRoleArn,
              executionRoleArn: executionRoleArn,
              networkMode: networkMode,
              containerDefinitions: containerDefinitions,
              requiresCompatibilities: requiresCompatibilities,
              cpu: cpu,
              memory: memory
            }' > td.json

          # troca a imagem do container "alfa"
          jq --arg IMG "${IMAGE}" --arg NAME "${CONTAINER}" '
            .containerDefinitions |= map(
              if .name==$NAME then .image=$IMG else . end
            )
          ' td.json > new-td.json

          echo "FILE=new-td.json" >> $GITHUB_OUTPUT

      - name: Register task definition revision
        id: register
        run: |
          ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.taskdef.outputs.FILE }} \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "ARN=$ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service (rolling update)
        run: |
          aws ecs update-service \
            --cluster "$CLUSTER" \
            --service "$SERVICE" \
            --task-definition "${{ steps.register.outputs.ARN }}" \
            --force-new-deployment

      - name: Wait service stable
        run: aws ecs wait services-stable --cluster "$CLUSTER" --services "$SERVICE"